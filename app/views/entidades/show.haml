= javascript_include_tag "d3/d3.v3.min.js"

:css
	.link line {
		stroke: #696969;
		color: black;
		width: 2px;
	}

	.link line.separator {
		stroke: #fff;
		stroke-width: 2px;
	}

	.node circle {
		stroke: #000;
		stroke-width: 1.5px;
	}

	.node text {
		font: 10px sans-serif;
		pointer-events: none;
	}

:javascript
	$(document).ready(function(){
		$('th').removeClass('reorder') // todo: implementar ordem!

		if ($('.grafo').length>0){
			var width = 960, height = 500;

			var color = d3.scale.category20();

			var radius = d3.scale.sqrt()
				.range([0, 6]);

			var svg = d3.select(".grafo").append("svg")
				.attr("width", width)
				.attr("height", height);

			var force = d3.layout.force()
				.size([width, height])
				.charge(-400)
				.linkDistance(function(d) { return radius(d.source.size) + radius(d.target.size) + 20; });

			eval("#{@js}"); // todo: refine
			console.log(graph);

			var edges = [];
			graph.links.forEach(function(e) {
				console.log(e);
				var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; })[0],
					targetNode = graph.nodes.filter(function(n) { return n.id === e.target; })[0];
				edges.push({source: sourceNode, target: targetNode, value: e.value});
			});

			force
					.nodes(graph.nodes)
					.links(edges)
					.on("tick", tick)
					.start();

			var link = svg.selectAll(".link")
					.data(graph.links)
					.enter().append("g")
					.attr("class", "link");

			link.append("line")
					.style("stroke-width", 2);

			link.filter(function(d) { return d.bond > 1; }).append("line")
					.attr("class", "separator");

			var node = svg.selectAll(".node")
				.data(graph.nodes)
				.enter().append("g")
				.attr("class", "node")
				.call(force.drag);

			node.append("circle")
				.attr("r", function(d) { return radius(d.size || 40); })
				.style("fill", function(d) { return color(d.node); });

			node.append("text")
					.attr("dy", ".35em")
					.attr("text-anchor", "middle")
					.text(function(d) { return d.label });

			function tick() {
				link.selectAll("line")
						.attr("x1", function(d) { return d.source.x; })
						.attr("y1", function(d) { return d.source.y; })
						.attr("x2", function(d) { return d.target.x; })
						.attr("y2", function(d) { return d.target.y; });
				node.attr("transform", function(d) {
				//	console.log(d);
					return "translate(" + d.x + "," + d.y + ")";
				});
			}
		}

	});

.well.status
	.titulo
		- if @entidade.empresa
			%i.icon-briefcase.afastado
		- else
			%i.icon-user.afastado
		= @entidade.nome

- # Cidade
#entidade{uid: @entidade.id}
	.well.center.borda
		#title{style:"font-size:15px"}
			%a{href: cidade_path(@entidade.cidade)}
				%i.icon-globe
					= "#{@entidade.cidade.nome} - #{@entidade.cidade.estado.sigla}"

	- # Labels
	.center{style: "padding-bottom:10px"}
		- if @entidade.projetos_count > 0
			.label.label-warning= "#{@entidade.projetos_count} projetos"
			- if @entidade.projetos_liberados > 0
				.label.label-info= "#{@entidade.projetos_liberados} aprovados"
			- else
				.label.label-important= "#{@entidade.projetos_liberados} aprovados"
		- else
			.label.label-important= "#{@entidade.projetos_count} projetos"

		- if @entidade.projetos_sum > 0
			.label.label-success= "#{reais @entidade.projetos_sum} captados"

		- if @entidade.incentivos_count > 0
			.label.label-info= "#{@entidade.incentivos_count} incentivos"

		- if @entidade.incentivos_sum > 0
			.label.label-success= "Incentivou #{reais @entidade.incentivos_sum}"

	- # Projetos
	- if @entidade.projetos_count > 0
		= render 'projetos/list', projetos: @entidade.projetos

	- # Incentivos
	- if @entidade.incentivos_count > 0
		%table.table.table-striped.table-bordered.table-condensed.borda
			%thead
				%tr
					%th{style: 'width: 420px'} Incentivou
					%th Segmento
					%th Valor
					%th Ãšltimo recibo

			%tbody
				- @entidade.incentivos.sort_by{:valor}.each do |incentivo|
					%tr
						%td= link_to_projeto incentivo.projeto
						%td= incentivo.projeto.segmento.nome
						%td= reais incentivo.valor
						%td
							%span.badge.badge-success
								= to_date incentivo.last_recibo_at

	- if @entidade.projetos_liberados>0 && @entidade.projetos_liberados<20
		%h4 Grafo de Incentivos
		.grafo

	- # Similares
	- similares = @entidade.similares
	- if similares.size > 0
		.well.borda.status= "Similares (#{similares.size})"
		- @entidades = @entidade.similares
		= render 'entidades/list'